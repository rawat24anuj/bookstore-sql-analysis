-- 1. Total books sold per genre
SELECT b.Genre, SUM(o.Quantity) AS Total_Books_Sold
FROM Orders o
JOIN Books b ON o.Book_ID = b.Book_ID
GROUP BY b.Genre;

-- 2. Revenue generated by each genre
SELECT b.Genre, SUM(o.Total_Amount) AS Revenue
FROM Orders o
JOIN Books b ON o.Book_ID = b.Book_ID
GROUP BY b.Genre;

-- 3. Top 3 most expensive books per genre
SELECT *
FROM (
  SELECT *, DENSE_RANK() OVER (PARTITION BY Genre ORDER BY Price DESC) AS rnk
  FROM Books
) sub
WHERE rnk <= 3;

-- 4. Most frequently ordered book
SELECT b.Title, SUM(o.Quantity) AS Total_Ordered
FROM Orders o
JOIN Books b ON o.Book_ID = b.Book_ID
GROUP BY b.Title
ORDER BY Total_Ordered DESC
LIMIT 1;

-- 5. Customer who spent the most
SELECT c.Name, SUM(o.Total_Amount) AS Total_Spent
FROM Orders o
JOIN Customers c ON o.Customer_ID = c.Customer_ID
GROUP BY c.Name
ORDER BY Total_Spent DESC
LIMIT 1;

-- 6. Remaining stock after all orders
SELECT b.Title, b.Stock, COALESCE(SUM(o.Quantity), 0) AS Ordered,
       b.Stock - COALESCE(SUM(o.Quantity), 0) AS Remaining
FROM Books b
LEFT JOIN Orders o ON b.Book_ID = o.Book_ID
GROUP BY b.Book_ID;

-- 7. Cities where customers spent over $30
SELECT DISTINCT c.City
FROM Orders o
JOIN Customers c ON o.Customer_ID = c.Customer_ID
WHERE o.Total_Amount > 30;

-- 8. Customers with at least 2 orders
SELECT c.Name, COUNT(*) AS Order_Count
FROM Orders o
JOIN Customers c ON o.Customer_ID = c.Customer_ID
GROUP BY c.Name
HAVING COUNT(*) >= 2;

-- 9. Author-wise total books sold
SELECT b.Author, SUM(o.Quantity) AS Books_Sold
FROM Orders o
JOIN Books b ON o.Book_ID = b.Book_ID
GROUP BY b.Author;

-- 10. Calculate the stock remaining after fulfilling all orders
SELECT b.book_id, b.title, b.stock, 
       COALESCE(SUM(o.quantity), 0) AS order_quantity,  
       b.stock - COALESCE(SUM(o.quantity), 0) AS remaining_quantity
FROM books b
LEFT JOIN orders o ON b.book_id = o.book_id
GROUP BY b.book_id 
ORDER BY b.book_id;

